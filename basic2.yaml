tosca_definitions_version: cloudify_dsl_1_3

imports:

  # - http://www.getcloudify.org/spec/cloudify/6.3.1/types.yaml
  # - http://www.getcloudify.org/spec/cloudify/6.4.0/types.yaml
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-aws-plugin

node_templates:

  basic_node:
    # type: cloudify.nodes.Root
    type: cloudify.nodes.Root
    properties:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/basic/creating.sh
          executor: central_deployment_agent
        configure:
          implementation: scripts/basic/configuring.sh
          executor: central_deployment_agent
        start:
          implementation: scripts/basic/starting.sh
          executor: central_deployment_agent
        stop:
          implementation: scripts/basic/stopping.sh
          executor: central_deployment_agent
        delete:
          implementation: scripts/basic/deleting.sh
          executor: central_deployment_agent

  basic_node2:
    # type: cloudify.nodes.Root
    type: cloudify.nodes.Root
    properties:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/basic/creating.sh
          executor: central_deployment_agent
        configure:
          implementation: scripts/basic/configuring.sh
          executor: central_deployment_agent
        start:
          implementation: scripts/basic/starting.sh
          executor: central_deployment_agent
        stop:
          implementation: scripts/basic/stopping.sh
          executor: central_deployment_agent
        delete:
          implementation: scripts/basic/deleting.sh
          executor: central_deployment_agent

  vm:
    type: cloudify.nodes.Compute


  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start:
          implementation: scripts/start.sh
          inputs:
            process:
              env:
                port: { get_input: webserver_port }
        stop: scripts/stop.sh

